name: Test Gymnasium Tutorials

on:
  # Run all tests when merging to main
  push:
    branches: [ main ]

  # Run tests only for modified tutorials in PRs
  pull_request:
    paths:
      - 'docs/tutorials/**/*.py'
      - '.github/workflows/test-tutorials.yml'

  # Allow manual trigger
  workflow_dispatch:

jobs:
  test-tutorials:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # This ensures all matrix combinations run even if one fails
      matrix:
        python-version: ["3.9"]
        tutorial-group:
          - gymnasium_basics
          - training_agents

    timeout-minutes: 30  # Set a reasonable timeout for all tests

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install Gymnasium and its dependencies
        pip install -e .[classic_control]

    - name: Install MuJoCo (for MuJoCo tutorials)
      if: matrix.tutorial-group == 'training_agents'
      run: |
        pip install mujoco .[mujoco] torch seaborn matplotlib pandas

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: docs/tutorials/**/*.py
      if: github.event_name == 'pull_request'

    - name: Test tutorials (${{ matrix.tutorial-group }})
      id: run-tutorials
      run: |
        echo "::group::Running tutorials in ${{ matrix.tutorial-group }}"
        mkdir -p test-results

        # Determine which tutorials to test
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Get the list of modified tutorial files in this group
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file == docs/tutorials/${{ matrix.tutorial-group }}/* && $file == *.py ]]; then
              echo $file >> tutorial_files.txt
            fi
          done

          # If no tutorials in this group were modified, skip this job
          if [ ! -f tutorial_files.txt ] || [ ! -s tutorial_files.txt ]; then
            echo "No tutorials modified in ${{ matrix.tutorial-group }} - skipping"
            exit 0
          fi
        else
          # Find all Python files in the tutorial group
          find docs/tutorials/${{ matrix.tutorial-group }} -name "*.py" -type f | sort > tutorial_files.txt
        fi

        # Initialize counters
        total=0
        passed=0
        failed=0

        # Run each tutorial with timeout - continue even if one fails
        while IFS= read -r tutorial; do
          # Clear separator for better readability
          echo ""
          echo "========================================================"
          echo "Running tutorial: $tutorial"
          echo "========================================================"
          total=$((total+1))

          # Set max time based on complexity (can be adjusted)
          max_time=300  # 5 minutes default

          # Create a marker to skip rendering for headless environment
          sed -i 's/render_mode="human"/render_mode="rgb_array"/g' "$tutorial" || true

          # Create log file path
          log_file="test-results/$(basename "$tutorial").log"
          
          # Run the tutorial with timeout and record results
          start_time=$(date +%s)
          # Use set +e so the script continues even if the command fails
          set +e
          timeout $max_time python "$tutorial" > "$log_file" 2>&1
          exit_code=$?
          set -e
          end_time=$(date +%s)
          execution_time=$((end_time-start_time))

          # Output results to console immediately
          if [ $exit_code -eq 0 ]; then
            echo "✅ PASSED: $tutorial (${execution_time}s)"
            passed=$((passed+1))
            echo "$tutorial,pass,$execution_time" >> test-results/summary.csv
          elif [ $exit_code -eq 124 ]; then
            echo "⚠️ TIMEOUT: $tutorial (exceeded ${max_time}s)"
            failed=$((failed+1))
            echo "$tutorial,timeout,$max_time" >> test-results/summary.csv
            # Show the last output before timeout
            echo "Last output before timeout:"
            echo "----------------------------------------"
            tail -n 20 "$log_file"
            echo "----------------------------------------"
          else
            echo "❌ FAILED: $tutorial (${execution_time}s)"
            failed=$((failed+1))
            echo "$tutorial,fail,$execution_time" >> test-results/summary.csv
            # Show the error details
            echo "Error details:"
            echo "----------------------------------------"
            cat "$log_file"
            echo "----------------------------------------"
          fi
          
        done < tutorial_files.txt

        echo "::endgroup::"

        # Set output variables
        echo "total=$total" >> $GITHUB_OUTPUT
        echo "passed=$passed" >> $GITHUB_OUTPUT
        echo "failed=$failed" >> $GITHUB_OUTPUT

        # Generate summary
        echo "### Tutorial Test Results for ${{ matrix.tutorial-group }} 📊" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
        echo "| ------ | ----- |" >> $GITHUB_STEP_SUMMARY
        echo "| ✅ Passed | $passed |" >> $GITHUB_STEP_SUMMARY
        echo "| ❌ Failed | $failed |" >> $GITHUB_STEP_SUMMARY
        echo "| 📚 Total | $total |" >> $GITHUB_STEP_SUMMARY

        # List all tested tutorials
        if [ $total -gt 0 ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tested Tutorials 📝" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          while IFS=, read -r file status time; do
            if [ "$status" == "pass" ]; then
              echo "- ✅ $file (${time}s)" >> $GITHUB_STEP_SUMMARY
            elif [ "$status" == "timeout" ]; then
              echo "- ⚠️ $file (timeout after ${time}s)" >> $GITHUB_STEP_SUMMARY
              # Add the last few lines of output to help debug timeout issues
              echo "  <details><summary>Last output before timeout</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  \`\`\`" >> $GITHUB_STEP_SUMMARY
              tail -n 20 "test-results/$(basename "$file").log" >> $GITHUB_STEP_SUMMARY
              echo "  \`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  </details>" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ❌ $file (failed after ${time}s)" >> $GITHUB_STEP_SUMMARY
              # Add the error details to help debug failures
              echo "  <details><summary>Error details</summary>" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  \`\`\`" >> $GITHUB_STEP_SUMMARY
              cat "test-results/$(basename "$file").log" >> $GITHUB_STEP_SUMMARY
              echo "  \`\`\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "  </details>" >> $GITHUB_STEP_SUMMARY
            fi
          done < test-results/summary.csv
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: tutorial-test-results-${{ matrix.tutorial-group }}
        path: test-results/
        retention-days: 7

    - name: Check test results
      if: always()
      run: |
        if [ "${{ steps.run-tutorials.outputs.total }}" -eq 0 ]; then
          echo "::notice::No tutorials were tested in this group."
        elif [ "${{ steps.run-tutorials.outputs.failed }}" -gt 0 ]; then
          echo "::warning::${{ steps.run-tutorials.outputs.failed }} out of ${{ steps.run-tutorials.outputs.total }} tutorials failed."
          # Using warning instead of error to not fail the workflow
          # The actual exit status is set below
        else
          echo "::notice::All ${{ steps.run-tutorials.outputs.total }} tutorials passed."
        fi
        
        # This ensures the job reports failure if any tutorials failed,
        # but without stopping other jobs in the matrix
        [ "${{ steps.run-tutorials.outputs.failed }}" -eq 0 ]